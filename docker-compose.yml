version: '3'
services:
  nginx:
    image: nginx:latest
    restart: unless-stopped
    container_name: ${PROJECT_SLUG}_nginx
    ports:
      - 80:80
      - 443:443
    networks:
      - internal
    volumes:
      - ./backend/public:/app/backend/public
      - ./frontend/public:/app/frontend/public
      - ./conf/nginx/:/etc/nginx:ro
      - ./logs/nginx/:/var/log/nginx
      - /etc/localtime:/etc/localtime:ro
      # - ./data/certbot/conf:/etc/letsencrypt
      # - ./data/certbot/www:/var/www/certbot
    depends_on:
      - frontend
      - backend
    # command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # certbot:
  #   image: certbot/certbot
  #   volumes:
  #     - ./data/certbot/conf:/etc/letsencrypt
  #     - ./data/certbot/www:/var/www/certbot
    
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  frontend:
    container_name: ${PROJECT_SLUG}_frontend
    build:
      context: .
      dockerfile: ./docker/frontend/${ENVIRONMENT}/Dockerfile
      args:
        - NODE_ENV=${ENVIRONMENT}
    restart: unless-stopped
    networks:
      - internal
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
      - ./logs/frontend:/root/.npm/_logs
    ports:
      - 3005:3005
    env_file:
      - ./.env

  backend:
    container_name: ${PROJECT_SLUG}_backend
    build:
      context: .
      dockerfile: ./docker/backend/${ENVIRONMENT}/Dockerfile
      args:
        - NODE_ENV=${ENVIRONMENT}
    restart: unless-stopped
    env_file: 
        - ./.env
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: postgres
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PORT: ${DATABASE_PORT}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      NODE_ENV: ${ENVIRONMENT}
      STRAPI_HOST: ${STRAPI_HOST}
      STRAPI_PORT: ${STRAPI_PORT}
    ports:
      - 1337:1337
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./.env:/app/.env
    networks:
      - internal
    depends_on:
      - postgres

  postgres:
    image: postgres:12.0-alpine
    container_name: ${PROJECT_SLUG}_postgres
    hostname: postgres
    platform: linux/amd64
    restart: unless-stopped
    env_file: .env
    ports:
      - ${DATABASE_PORT}:${DATABASE_PORT}
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    networks:
      - internal
  pgadmin:
    image: dpage/pgadmin4
    container_name: ${PROJECT_SLUG}_pgadmin4
    restart: always
    env_file: .env
    ports:
      - 5050:80
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres

volumes:
  postgres-data:
  pgadmin-data:

networks:
  internal:
    name: ${PROJECT_SLUG}_internal
    driver: bridge
